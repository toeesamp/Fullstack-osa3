{"version":3,"sources":["components/Person.js","components/Filter.js","components/PersonAdder.js","components/Notification.js","services/Persons.js","components/App.js","index.js"],"names":["Person","name","number","deleteHandler","onClick","Filter","text","value","handler","onChange","PersonAdder","header","submitFunction","nameHandler","numberHandler","onSubmit","type","Notification","message","className","baseUrl","axios","get","newObject","post","id","put","delete","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filter","setFilter","notification","setNotification","notificationType","setNotificationType","personsToShow","person","toLowerCase","includes","useEffect","personService","then","response","data","event","target","preventDefault","personObject","some","window","confirm","updateId","find","map","setTimeout","catch","error","concat","console","log","i","key","personToBeDeleted","deletePerson","ReactDOM","render","document","getElementById"],"mappings":"+NAUeA,EARA,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,cAC5B,OACI,4BAAKF,EAAL,IAAYC,EACR,4BAAQE,QAASD,GAAjB,YCQGE,EAXA,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QAC1B,OACI,6BACKF,EADL,IACW,2BACHC,MAAOA,EACPE,SAAUD,MCoBXE,EAzBK,SAAC,GAAwE,IAAvEC,EAAsE,EAAtEA,OAAQC,EAA8D,EAA9DA,eAAgBX,EAA8C,EAA9CA,KAAMY,EAAwC,EAAxCA,YAAaX,EAA2B,EAA3BA,OAAQY,EAAmB,EAAnBA,cACrE,OACI,oCACI,4BAAKH,GACL,0BAAMI,SAAUH,GACZ,sCACU,2BACFL,MAAON,EACPQ,SAAUI,KAGlB,wCACY,2BACJN,MAAOL,EACPO,SAAUK,KAGlB,6BACI,4BAAQE,KAAK,UAAb,WCNLC,EAZM,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,QAASF,EAAW,EAAXA,KAC7B,OAAgB,OAAZE,EACK,KAIP,yBAAKC,UAAS,UAAKH,IAChBE,I,gBCRHE,EAAU,eAkBD,EAhBA,WACb,OAAOC,IAAMC,IAAIF,IAeJ,EAZA,SAAAG,GACb,OAAOF,IAAMG,KAAKJ,EAASG,IAWd,EARA,SAACE,EAAIF,GAClB,OAAOF,IAAMK,IAAN,UAAaN,EAAb,YAAwBK,GAAMF,IAOxB,EAJM,SAACE,GACpB,OAAOJ,IAAMM,OAAN,UAAgBP,EAAhB,YAA2BK,KCiHrBG,EA1HH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACPC,EADO,KACEC,EADF,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGoBJ,mBAAS,IAH7B,mBAGPK,EAHO,KAGIC,EAHJ,OAIcN,mBAAS,IAJvB,mBAIPO,EAJO,KAICC,EAJD,OAK0BR,mBAAS,IALnC,mBAKPS,EALO,KAKOC,EALP,OAMkCV,mBAAS,IAN3C,mBAMPW,EANO,KAMWC,EANX,KA+FRC,EAAgBZ,EAAQM,QAAO,SAAAO,GAAM,OAAIA,EAAM,KAASC,cAAcC,SAAST,EAAOQ,kBAU5F,OARAE,qBAAU,WACNC,IAEKC,MAAK,SAAAC,GACFlB,EAAWkB,EAASC,WAE7B,IAGC,6BACI,yCACA,kBAAC,EAAD,CAAchC,QAASoB,EAActB,KAAMwB,IAC3C,kBAAC,EAAD,CAAQlC,KAAM,oBAAqBC,MAAO6B,EAAQ5B,QA7F1B,SAAC2C,GAC7Bd,EAAUc,EAAMC,OAAO7C,UA6FnB,kBAAC,EAAD,CAAaI,OAAQ,YAAaC,eA1FxB,SAACuC,GACfA,EAAME,iBACN,IAAMC,EAAe,CAAErD,KAAM+B,EAAS9B,OAAQgC,GAC9C,GAAIJ,EAAQyB,MAAK,SAAAZ,GAAM,OAAIA,EAAM,OAAaX,KAAU,CACpD,IAAKwB,OAAOC,QAAP,UAAkBzB,EAAlB,2EACD,OAEJ,IAAM0B,EAAW5B,EAAQ6B,MAAK,SAAAhB,GAAM,OAAIA,EAAM,OAAaX,KAASP,GACpEsB,EACYW,EAAUJ,GACjBN,MAAK,SAAAC,GAEFlB,EAAWD,EAAQ8B,KAAI,SAAAjB,GAAM,OAAIA,EAAOlB,KAAOiC,EAAWf,EAASM,EAASC,SAC5EX,EAAgB,GAAD,OAAIP,EAAJ,sBACfS,EAAoB,QACpBoB,YAAW,WACPtB,EAAgB,QACjB,QAENuB,OAAM,SAAAC,GACHxB,EAAgB,oBAAD,OAAqBP,EAArB,aAAiC+B,IAChDtB,EAAoB,SACpBoB,YAAW,WACPtB,EAAgB,QACjB,cAGXQ,EACYO,GACPN,MAAK,SAAAC,GACFlB,EAAWD,EAAQkC,OAAOf,EAASC,OACnCjB,EAAW,IACXE,EAAa,IACbI,EAAgB,SAAD,OAAUP,IACzBS,EAAoB,QACpBoB,YAAW,WACPtB,EAAgB,QACjB,QAENuB,OAAM,SAAAC,GACHxB,EAAgB,SAChB0B,QAAQC,IAAIH,EAAMd,SAASC,MAC3Be,QAAQC,IAAIH,EAAMd,SAASC,KAAKa,OAChCtB,EAAoB,SACpBoB,YAAW,WACPtB,EAAgB,QACjB,UA4CkDtC,KAAM+B,EAASnB,YAtGtD,SAACsC,GAC3BlB,EAAWkB,EAAMC,OAAO7C,QAqG4FL,OAAQgC,EAAWpB,cAlG3G,SAACqC,GAC7BhB,EAAagB,EAAMC,OAAO7C,UAkGtB,uCACA,4BACKmC,EAAckB,KAAI,SAACjB,EAAQwB,GAAT,OACf,kBAAC,EAAD,CAAQC,IAAKD,EAAGlE,KAAM0C,EAAO1C,KAAMC,OAAQyC,EAAOzC,OAAQC,cAAe,kBA3CpE,SAACsB,GAClB,IAAM4C,EAAoBvC,EAAQ6B,MAAK,SAAAhB,GAAM,OAAIA,EAAOlB,KAAOA,KAC1D+B,OAAOC,QAAP,iBAAyBY,EAAkBpE,KAA3C,OAGL8C,EACkBtB,GACbuB,MAAK,SAAAC,GACFlB,EAAWD,EAAQM,QAAO,SAAAO,GAAM,OAAIA,IAAW0B,MAC/C9B,EAAgB,GAAD,OAAI8B,EAAkBpE,KAAtB,sBACfwC,EAAoB,QACpBoB,YAAW,WACPtB,EAAgB,QACjB,QAENuB,OAAM,SAAAC,GACHxB,EAAgB,oBAAD,OAAqBP,EAArB,aAAiC+B,IAChDtB,EAAoB,SACpBoB,YAAW,WACPtB,EAAgB,QACjB,SAuBgF+B,CAAa3B,EAAOlB,a,MCpHvH8C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.a14605d7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Person = ({ name, number, deleteHandler}) => {\r\n    return (\r\n        <li>{name} {number} \r\n            <button onClick={deleteHandler} >delete</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Person","import React from 'react'\r\n\r\nconst Filter = ({text, value, handler}) => {\r\n    return (\r\n        <div>\r\n            {text} <input\r\n                value={value}\r\n                onChange={handler}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst PersonAdder = ({header, submitFunction, name, nameHandler, number, numberHandler}) => {\r\n    return (\r\n        <>\r\n            <h2>{header}</h2>\r\n            <form onSubmit={submitFunction}>\r\n                <div>\r\n                    name: <input\r\n                        value={name}\r\n                        onChange={nameHandler}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    number: <input\r\n                        value={number}\r\n                        onChange={numberHandler}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\">add</button>\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PersonAdder","import React from 'react'\r\n\r\nconst Notification = ({ message, type }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className={`${type}`}>\r\n        {message}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n} \r\n\r\nexport default { getAll, create, update, deletePerson }","import React, { useState, useEffect } from 'react'\r\nimport Person from './Person'\r\nimport Filter from './Filter'\r\nimport PersonAdder from './PersonAdder'\r\nimport Notification from './Notification'\r\nimport personService from '../services/Persons'\r\n\r\nconst App = () => {\r\n    const [persons, setPersons] = useState([])\r\n    const [newName, setNewName] = useState('')\r\n    const [newNumber, setNewNumber] = useState('')\r\n    const [filter, setFilter] = useState('')\r\n    const [notification, setNotification] = useState('')\r\n    const [notificationType, setNotificationType] = useState('')\r\n\r\n    const handleNameInputChange = (event) => {\r\n        setNewName(event.target.value)\r\n    }\r\n\r\n    const handleNumberInputChange = (event) => {\r\n        setNewNumber(event.target.value)\r\n    }\r\n\r\n    const handleFilterInputChange = (event) => {\r\n        setFilter(event.target.value)\r\n    }\r\n\r\n    const addPerson = (event) => {\r\n        event.preventDefault()\r\n        const personObject = { name: newName, number: newNumber }\r\n        if (persons.some(person => person['name'] === newName)) {\r\n            if (!window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\r\n                return\r\n            }\r\n            const updateId = persons.find(person => person['name'] === newName).id\r\n            personService\r\n                .update(updateId, personObject)\r\n                .then(response => {\r\n                    // replace updated person with response data and copy others\r\n                    setPersons(persons.map(person => person.id !== updateId ? person : response.data))\r\n                    setNotification(`${newName} has been updated`)\r\n                    setNotificationType('info')\r\n                    setTimeout(() => {\r\n                        setNotification(null)\r\n                    }, 5000)\r\n                })\r\n                .catch(error => {\r\n                    setNotification(`Unable to update ${newName}: ${error}` )\r\n                    setNotificationType('error')\r\n                    setTimeout(() => {\r\n                        setNotification(null)\r\n                    }, 15000)\r\n                })\r\n        } else {\r\n            personService\r\n                .create(personObject)\r\n                .then(response => {\r\n                    setPersons(persons.concat(response.data))\r\n                    setNewName('')\r\n                    setNewNumber('')\r\n                    setNotification(`Added ${newName}`)\r\n                    setNotificationType('info')\r\n                    setTimeout(() => {\r\n                        setNotification(null)\r\n                    }, 5000)\r\n                })\r\n                .catch(error => {\r\n                    setNotification('error')\r\n                    console.log(error.response.data)\r\n                    console.log(error.response.data.error)\r\n                    setNotificationType('error')\r\n                    setTimeout(() => {\r\n                        setNotification(null)\r\n                    }, 15000)\r\n                })\r\n        }\r\n    }\r\n\r\n    const deletePerson = (id) => {\r\n        const personToBeDeleted = persons.find(person => person.id === id)\r\n        if (!window.confirm(`Delete ${personToBeDeleted.name}?`)) {\r\n            return\r\n        }\r\n        personService\r\n            .deletePerson(id)\r\n            .then(response => {\r\n                setPersons(persons.filter(person => person !== personToBeDeleted))\r\n                setNotification(`${personToBeDeleted.name} has been deleted`)\r\n                setNotificationType('info')\r\n                setTimeout(() => {\r\n                    setNotification(null)\r\n                }, 5000)\r\n            })\r\n            .catch(error => {\r\n                setNotification(`Unable to delete ${newName}: ${error}` )\r\n                setNotificationType('error')\r\n                setTimeout(() => {\r\n                    setNotification(null)\r\n                }, 15000)\r\n            })\r\n    }\r\n\r\n    const personsToShow = persons.filter(person => person['name'].toLowerCase().includes(filter.toLowerCase()))\r\n\r\n    useEffect(() => {\r\n        personService\r\n            .getAll()\r\n            .then(response => {\r\n                setPersons(response.data)\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <h2>Phonebook</h2>\r\n            <Notification message={notification} type={notificationType} />\r\n            <Filter text={'filter shown with'} value={filter} handler={handleFilterInputChange} />\r\n            <PersonAdder header={'add a new'} submitFunction={addPerson} name={newName} nameHandler={handleNameInputChange} number={newNumber} numberHandler={handleNumberInputChange} />\r\n            <h2>Numbers</h2>\r\n            <ul>\r\n                {personsToShow.map((person, i) =>\r\n                    <Person key={i} name={person.name} number={person.number} deleteHandler={() => deletePerson(person.id)} />\r\n                )}\r\n\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}